Course 7/23/2012

Chapter 13, Camera

pg. 171: Use the following code for surfaceChanged:

        public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
            // the surface has changed size; update the camera preview size
            Camera.Parameters parameters = camera.getParameters();
            Size s = null; // ????
            parameters.setPreviewSize(s.width, s.height);
            camera.setParameters(parameters);
            s = null; // ???
            parameters.setPictureSize(s.width, s.height);
            try {
                camera.startPreview();
            } catch (Exception e) {
                Log.e(TAG, "Could not start preview", e);
                camera.release();
                camera = null;
            }
        }

pg. 172: Use the following code for surfaceChanged:

        public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
            // the surface has changed size; update the camera preview size
            Camera.Parameters parameters = camera.getParameters();
            Size s = getBestSupportedSize(parameters.getSupportedPreviewSizes(), w, h);
            parameters.setPreviewSize(s.width, s.height);
            s = getBestSupportedSize(parameters.getSupportedPictureSizes(), w, h);
            parameters.setPictureSize(s.width, s.height);
            camera.setParameters(parameters);
            try {
                camera.startPreview();
            } catch (Exception e) {
                Log.e(TAG, "Could not start preview", e);
                camera.release();
                camera = null;
            }
        }


pg. 182: Use the following alternative getScaledDrawable() implementation 
    (uses code from http://developer.android.com/training/displaying-bitmaps/load-bitmap.html):

    public static BitmapDrawable getScaledDrawable(Activity a, String path) {
        Display display = a.getWindowManager().getDefaultDisplay();
        float destWidth = display.getWidth();
        float destHeight = display.getHeight();

        // read in the dimensions of the image on disk
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(path, options);

        float srcWidth = options.outWidth;
        float srcHeight = options.outHeight;

        int inSampleSize = 1;
        if (srcHeight > destHeight || srcWidth > destWidth) {
            if (srcWidth > srcHeight) {
                inSampleSize = Math.round((float)srcHeight / (float)destHeight);
            } else {
                inSampleSize = Math.round((float)srcWidth / (float)destWidth);
            }
        }

        options = new BitmapFactory.Options();
        options.inSampleSize = inSampleSize;

        return new BitmapDrawable(BitmapFactory.decodeFile(path, options));
    }


Chapter 16, Dialogs

pg. 215: Omit the setNeutralButton code from the text:

    public static class NoteTextOptionsDialog extends NoteDialog {
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            final String[] strings = getResources().getStringArray(R.array.dialog_note_text_options);
            // initially set the note text to the default - will change
            // if the user makes a selection
            updateNoteText(strings[0]);
            return new AlertDialog.Builder(getActivity())
                .setTitle(R.string.dialog_note_text_options_title)
                .setSingleChoiceItems(R.array.dialog_note_text_options, 0,
                    new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        // set the note's text
                        updateNoteText(strings[which]);
                        dialog.dismiss();
                    }
                })
                .setPositiveButton(android.R.string.ok, null)
                .create();
        }
    }
